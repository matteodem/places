#!/bin/bash

# Overall check
if [ ! -d ".meteor" ]
    then echo 'Please use the meteor-boilerplate console tool out of your project root (./meteor-boilerplate)'
    exit
fi

case ${1} in
    create:view)
        if [ -z ${2} ]; then echo "Define a view name!"; exit; fi
        if [ -d "client/views/$2" ]; then echo "Remove the existing view ($2) folder manually!"; exit; fi
        if [ -d "client/modules/$2" ]; then echo "There's already a module called $2!"; exit; fi
        if [ -f "client/views/common/$2.html" ]; then echo "Remove the existing common view ($2) manually!"; exit; fi

        # Create folder
        mkdir -p client/views/${2}

        # Create files
        touch client/views/${2}/${2}.js
        touch client/views/${2}/${2}.less
        touch client/views/${2}/${2}.html
        # Fill files
        echo "<template name=\"${2}\">" >> client/views/${2}/${2}.html
        echo "    <p>Template ${2}</p>" >> client/views/${2}/${2}.html
        echo "</template>"              >> client/views/${2}/${2}.html
        echo ""                         >> client/views/${2}/${2}.html
        echo "Template['${2}'].helpers({"  >> client/views/${2}/${2}.js
        echo "});"                      >> client/views/${2}/${2}.js
        echo ""                         >> client/views/${2}/${2}.js
        echo "Template['${2}'].events({"   >> client/views/${2}/${2}.js
        echo "});"                      >> client/views/${2}/${2}.js
        echo ""                         >> client/views/${2}/${2}.js
        echo "@import '../../stylesheets/variables.less'; "  >> client/views/${2}/${2}.less
        echo ""                                             >> client/views/${2}/${2}.less
        # Succesful
        echo "Successfully created a view called \"${2}\""
        ;;
    create:common)
        if [ -z ${2} ]; then echo "Define a common view name!"; exit; fi
        if [ -f "client/views/common/$2.html" ]; then echo "Remove the existing common view ($2) manually!"; exit; fi
        if [ -d "client/views/$2" ]; then echo "Remove the existing view ($2) folder manually!"; exit; fi
        if [ -d "client/modules/$2" ]; then echo "There's already a module called $2!"; exit; fi

        # Create folder
        mkdir -p client/views/common

        touch client/views/common/${2}.html
        # Fill files
        echo "<template name=\"${2}\">" >> client/views/common/${2}.html
        echo "    <p>Template ${2}</p>" >> client/views/common/${2}.html
        echo "</template>"              >> client/views/common/${2}.html
        echo ""                         >> client/views/common/${2}.html
        # Succesful
        echo "Successfully created a common view called \"${2}\""
        ;;
    create:route)
        if [ -z ${2} ] || [ -z ${3} ]; then echo "The first parameter is the route / template name and the second one the path (e. g. create:route home /)"; exit; fi
        h2="$(tr '[:lower:]' '[:upper:]' <<< ${2:0:1})${2:1}";
        if [ -f "client/routes/${h2}Route.js" ]; then echo "Remove the existing route $2 manually!"; exit; fi

        # Create folder
        mkdir -p client/routes

        # Create file
        touch client/routes/${h2}Route.js

        # Fill files
        echo "var ${h2}Controller = RouteController.extend({"                   >> client/routes/${h2}Route.js
        echo "    template: '${2}'"                                             >> client/routes/${h2}Route.js
        echo "});"                                                              >> client/routes/${h2}Route.js
        echo ""                                                                 >> client/routes/${h2}Route.js
        echo "Router.map(function () {"                                         >> client/routes/${h2}Route.js
        echo "    this.route('${2}', {"                                         >> client/routes/${h2}Route.js
        echo "        path :  '${3}',"                                          >> client/routes/${h2}Route.js
        echo "        controller :  ${h2}Controller"                            >> client/routes/${h2}Route.js
        echo "    });"                                                          >> client/routes/${h2}Route.js
        echo "});"                                                              >> client/routes/${h2}Route.js
        echo ""                                                                 >> client/routes/${h2}Route.js

        # Succesful
        echo "Successfully created a route called \"${h2}Route\" and the has the path ${3}"
        ;;
    create:module)
        if [ -z ${2} ]; then echo "Define a module name!"; exit; fi
        if [ -d "client/modules/$2" ]; then echo "Remove the existing module ($2) folder manually!"; exit; fi
        if [ -d "client/views/$2" ]; then echo "There's already a view called $2!"; exit; fi
        if [ -f "client/views/common/$2.html" ]; then echo "Remove the existing common view ($2) manually!"; exit; fi

        # Create folder
        mkdir -p client/modules/${2}

        # Create files
        touch client/modules/${2}/${2}.js
        touch client/modules/${2}/${2}.less
        touch client/modules/${2}/${2}.html

        # Fill files
        echo "<template name=\"${2}\">" >> client/modules/${2}/${2}.html
        echo "    <p>Template ${2}</p>" >> client/modules/${2}/${2}.html
        echo "</template>"              >> client/modules/${2}/${2}.html
        echo ""                         >> client/modules/${2}/${2}.html

        echo "Template['${2}'].helpers({"  >> client/modules/${2}/${2}.js
        echo "});"                      >> client/modules/${2}/${2}.js
        echo ""                         >> client/modules/${2}/${2}.js
        echo "Template['${2}'].events({"   >> client/modules/${2}/${2}.js
        echo "});"                      >> client/modules/${2}/${2}.js
        echo ""                         >> client/modules/${2}/${2}.js

        echo "@import '../../stylesheets/variables.less'; "  >> client/modules/${2}/${2}.less
        echo ""                                             >> client/modules/${2}/${2}.less

        # Succesful
        echo "Successfully created a module called \"${2}\""
        ;;
    create:model)
        if [ -z ${2} ]; then echo "Define a model name!"; exit; fi
        if [ -f "model/$2.js" ]; then echo "Remove the existing model $2 manually!"; exit; fi
        if [ -f "server/publications/$2.js" ]; then echo "Remove the existing publication file $2 manually!"; exit; fi
        if [ -f "client/subscriptions/$2.js" ]; then echo "Remove the existing subscription file $2 manually!"; exit; fi
        h2="$(tr '[:lower:]' '[:upper:]' <<< ${2:0:1})${2:1}";

        # Create folder
        mkdir -p server/publications
        mkdir -p client/subscriptions

        # Create file
        touch model/${2}.js
        touch server/publications/$2.js
        touch client/subscriptions/$2.js

        # Fill files
        echo "$h2 = new Meteor.Collection('${2}');"     >> model/${2}.js
        echo ""                                         >> model/${2}.js
        echo "$h2.allow({"                              >> model/${2}.js
        echo "    insert : function () {"               >> model/${2}.js
        echo "        return false;"                    >> model/${2}.js
        echo "    },"                                   >> model/${2}.js
        echo "    update : function () {"               >> model/${2}.js
        echo "        return false;"                    >> model/${2}.js
        echo "    },"                                   >> model/${2}.js
        echo "    remove : function () {"               >> model/${2}.js
        echo "        return false;"                    >> model/${2}.js
        echo "    }"                                    >> model/${2}.js
        echo "});"                                      >> model/${2}.js
        echo ""                                         >> model/${2}.js
        echo "// Use Meteor.methods for db operations"  >> model/${2}.js
        echo "Meteor.methods({"                         >> model/${2}.js
        echo "});"                                      >> model/${2}.js
        echo ""                                         >> model/${2}.js

        echo "Meteor.publish('${2}', function () {"     >> server/publications/${2}.js
        echo "    return $h2.find();"                   >> server/publications/${2}.js
        echo "});"                                      >> server/publications/${2}.js
        echo ""                                         >> server/publications/${2}.js

        echo "Meteor.subscribe('${2}');"                >> client/subscriptions/${2}.js
        echo ""                                         >> client/subscriptions/${2}.js

        # Succesful
        echo "Successfully created a model called \"${2}\" (with files in model, client/subscriptions and server/publications)"
        ;;
    create:test)
        if [ -z ${2} ]; then echo "Define a test name!"; exit; fi
        if [ -f "tests/$2.js" ]; then echo "Remove the existing test $2 manually!"; exit; fi

        # Create file
        touch tests/${2}.js

        h2="$(tr '[:lower:]' '[:upper:]' <<< ${2:0:1})${2:1}";

        # Fill file
        echo "var assert = require('assert');"          >> tests/${2}.js
        echo ""                                         >> tests/${2}.js
        echo "suite('$h2', function () {"               >> tests/${2}.js
        echo "});"                                      >> tests/${2}.js

        # Succesful
        echo "Successfully created a test called ${2}.js under tests"
        ;;
    *)
        if [ -z ${1} ]; then
            echo ""
        else
            echo "Could not find the command!"
            echo ""
        fi
        echo "List of possible operations: "
        echo -e "create:test   - Test file under tests"
        echo -e "create:view   - View folder under client/views with html, js and less files in it"
        echo -e "create:common - Html template file under client/views/common"
        echo -e "create:route  - Route javascript file under client/routes"
        echo -e "create:model  - Model with files in model/, client/subscriptions and server/publications"
        echo -e "create:module - Module, such as a searchbar, form etc."
        echo ""
        ;;
esac
